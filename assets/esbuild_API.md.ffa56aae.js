import{_ as l,c as i,o as e,d as o}from"./app.6547ddac.js";const m=JSON.parse('{"title":"API","description":"","frontmatter":{},"headers":[{"level":2,"title":"Transform API","slug":"transform-api","link":"#transform-api","children":[]},{"level":2,"title":"Build API","slug":"build-api","link":"#build-api","children":[]}],"relativePath":"esbuild/API.md","lastUpdated":1673244837000}'),s={name:"esbuild/API.md"},a=o(`<h1 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-hidden="true">#</a></h1><p>可以通过以下三种方式之一访问API：命令行、<code>JavaScript</code>和<code>Go</code>。这三种语言的概念和参数在很大程度上是相同的，因此它们将在这里一起呈现，而不是为每种语言提供单独的文档。</p><p><code>esbuild</code>的API中有两个主要的<code>API</code>调用：<code>transform</code>和<code>build</code>。你应该使用哪一种很重要，您应该了解清楚，因为它们的工作方式不同。</p><p>如果您正在使用<code>JavaScript</code>，请务必查看下面的<code>JS特定内容</code>信息部分。您还可以找到<code>esbuild</code>的<code>TypeScript</code>类型定义作为参考。如果您正在使用Go，请务必查看自动生成的Go文档。</p><p>如果您使用的是命令行API，了解这些标志的形式可能会有所帮助：<code>--foo</code>、<code>--foo=bar</code>或<code>--foo:bar</code>。形式<code>--foo</code>用于启用布尔标志（如<code>--minify</code>），形式<code>--foo=bar</code>用于具有单个值且仅指定一次的标志（如<code>--platform=</code>），而形式<code>--foo:bar</code>用于具有多个值且可以多次重新指定的标志（例如<code>--external:</code>）。</p><h2 id="transform-api" tabindex="-1">Transform API <a class="header-anchor" href="#transform-api" aria-hidden="true">#</a></h2><p><code>Transform API</code>能在不访问文件系统的情况下对单个字符串进行操作。这使得它非常适合在没有文件系统（如浏览器）或作为其他工具链的一部分。下面是一个简单的变换：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">let x: number = 1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">esbuild</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--loader=ts</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># let x = 1;</span></span>
<span class="line"></span></code></pre></div><p>如果没有提供输入文件并且<code>--bundle</code>标志不存在，命令行接口将使用此API。在这种情况下，输入字符串来自stdin，输出字符串则到达stdout。转换API可以支持以下选项：</p><p><strong>简单选项:</strong></p><ul><li>Define</li><li>Format</li><li>Loader</li><li>Minify</li><li>Platform</li><li>Sourcemap</li><li>Target</li></ul><p><strong>高级选项:</strong></p><ul><li>Banner</li><li>Charset</li><li>Color</li><li>Drop</li><li>Footer</li><li>Global name</li><li>Ignore annotations</li><li>JSX</li><li>JSX dev</li><li>JSX factory</li><li>JSX fragment</li><li>JSX import source</li><li>JSX side effects</li><li>Keep names</li><li>Legal comments</li><li>Log level</li><li>Log limit</li><li>Log override</li><li>Mangle props</li><li>Pure</li><li>Source root</li><li>Sourcefile</li><li>Sources content</li><li>Supported</li><li>Tree shaking</li><li>Tsconfig raw</li></ul><h2 id="build-api" tabindex="-1">Build API <a class="header-anchor" href="#build-api" aria-hidden="true">#</a></h2><p><code>Build API</code>对文件系统中的一个或多个文件进行操作。这允许文件相互引用并打包在一起。下面是简单构建的样子：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">let x: number = 1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in.ts</span></span>
<span class="line"><span style="color:#FFCB6B;">esbuild</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in.ts</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--outfile=out.js</span></span>
<span class="line"><span style="color:#FFCB6B;">cat</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">out.js</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># let x = 1;</span></span>
<span class="line"></span></code></pre></div><p>如果提供了输入文件或存在<code>--bundle</code>标志，则命令行接口将使用此API。请注意，默认情况下<code>esbuild</code>不会打包。必须显式传递<code>--bundle</code>标志才能启用打包。如果未提供输入文件，则从stdin读取单个输入文件。<code>Build API</code>可以支持以下选项：</p><p><strong>简单选项:</strong></p><ul><li>Alias</li><li>Analyze</li><li>Bundle</li><li>Define</li><li>Entry points</li><li>External</li><li>Format</li><li>Inject</li><li>Loader</li><li>Minify</li><li>Outdir</li><li>Outfile</li><li>Packages</li><li>Platform</li><li>Serve</li><li>Sourcemap</li><li>Splitting</li><li>Target</li><li>Watch</li><li>Write</li></ul><p><strong>高级选项:</strong></p><ul><li>Allow overwrite</li><li>Asset names</li><li>Banner</li><li>Charset</li><li>Chunk names</li><li>Color</li><li>Conditions</li><li>Drop</li><li>Entry names</li><li>Footer</li><li>Global name</li><li>Ignore annotations</li><li>Incremental</li><li>JSX</li><li>JSX dev</li><li>JSX factory</li><li>JSX fragment</li><li>JSX import source</li><li>JSX side effects</li><li>Keep names</li><li>Legal comments</li><li>Log level</li><li>Log limit</li><li>Log override</li><li>Main fields</li><li>Mangle props</li><li>Metafile</li><li>Node paths</li><li>Out extension</li><li>Outbase</li><li>Preserve symlinks</li><li>Public path</li><li>Pure</li><li>Resolve extensions</li><li>Source root</li><li>Sourcefile</li><li>Sources content</li><li>Stdin</li><li>Supported</li><li>Tree shaking</li><li>Tsconfig</li><li>Working directory</li></ul>`,21),n=[a];function t(r,c,p,d,u,f){return e(),i("div",null,n)}const y=l(s,[["render",t]]);export{m as __pageData,y as default};
