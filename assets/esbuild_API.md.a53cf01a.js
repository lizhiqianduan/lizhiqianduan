import{_ as s,c as l,o as a,d as n}from"./app.6d9d3070.js";const A=JSON.parse('{"title":"API | esbuild 中文文档","description":"","frontmatter":{"title":"API | esbuild 中文文档"},"headers":[{"level":2,"title":"Transform API","slug":"transform-api","link":"#transform-api","children":[]},{"level":2,"title":"Build API","slug":"build-api","link":"#build-api","children":[]},{"level":2,"title":"简单选项","slug":"简单选项","link":"#简单选项","children":[{"level":3,"title":"Alias","slug":"alias","link":"#alias","children":[]},{"level":3,"title":"Analyze","slug":"analyze","link":"#analyze","children":[]},{"level":3,"title":"Bundle","slug":"bundle","link":"#bundle","children":[]}]}],"relativePath":"esbuild/API.md","lastUpdated":1673253013000}'),e={name:"esbuild/API.md"},o=n(`<h1 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-hidden="true">#</a></h1><p>可以通过以下三种方式之一访问API：命令行、<code>JavaScript</code>和<code>Go</code>。这三种语言的概念和参数在很大程度上是相同的，因此它们将在这里一起呈现，而不是为每种语言提供单独的文档。</p><p><code>esbuild</code>的API中有两个主要的<code>API</code>调用：<code>transform</code>和<code>build</code>。你应该使用哪一种很重要，您应该了解清楚，因为它们的工作方式不同。</p><p>如果您正在使用<code>JavaScript</code>，请务必查看下面的<code>JS特定内容</code>信息部分。您还可以找到<code>esbuild</code>的<code>TypeScript</code>类型定义作为参考。如果您正在使用Go，请务必查看自动生成的Go文档。</p><p>如果您使用的是命令行API，了解这些标志的形式可能会有所帮助：<code>--foo</code>、<code>--foo=bar</code>或<code>--foo:bar</code>。形式<code>--foo</code>用于启用布尔标志（如<code>--minify</code>），形式<code>--foo=bar</code>用于具有单个值且仅指定一次的标志（如<code>--platform=</code>），而形式<code>--foo:bar</code>用于具有多个值且可以多次重新指定的标志（例如<code>--external:</code>）。</p><h2 id="transform-api" tabindex="-1">Transform API <a class="header-anchor" href="#transform-api" aria-hidden="true">#</a></h2><p><code>Transform API</code>能在不访问文件系统的情况下对单个字符串进行操作。这使得它非常适合在没有文件系统（如浏览器）或作为其他工具链的一部分。下面是一个简单的变换：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">let x: number = 1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">esbuild</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--loader=ts</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># let x = 1;</span></span>
<span class="line"></span></code></pre></div><p>如果没有提供输入文件并且<code>--bundle</code>标志不存在，命令行接口将使用此API。在这种情况下，输入字符串来自stdin，输出字符串则到达stdout。转换API可以支持以下选项：</p><p><strong>简单选项:</strong></p><ul><li>Define</li><li>Format</li><li>Loader</li><li>Minify</li><li>Platform</li><li>Sourcemap</li><li>Target</li></ul><p><strong>高级选项:</strong></p><ul><li>Banner</li><li>Charset</li><li>Color</li><li>Drop</li><li>Footer</li><li>Global name</li><li>Ignore annotations</li><li>JSX</li><li>JSX dev</li><li>JSX factory</li><li>JSX fragment</li><li>JSX import source</li><li>JSX side effects</li><li>Keep names</li><li>Legal comments</li><li>Log level</li><li>Log limit</li><li>Log override</li><li>Mangle props</li><li>Pure</li><li>Source root</li><li>Sourcefile</li><li>Sources content</li><li>Supported</li><li>Tree shaking</li><li>Tsconfig raw</li></ul><h2 id="build-api" tabindex="-1">Build API <a class="header-anchor" href="#build-api" aria-hidden="true">#</a></h2><p><code>Build API</code>对文件系统中的一个或多个文件进行操作。这允许文件相互引用并打包在一起。下面是简单构建的样子：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">let x: number = 1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in.ts</span></span>
<span class="line"><span style="color:#FFCB6B;">esbuild</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in.ts</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--outfile=out.js</span></span>
<span class="line"><span style="color:#FFCB6B;">cat</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">out.js</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># let x = 1;</span></span>
<span class="line"></span></code></pre></div><p>如果提供了输入文件或存在<code>--bundle</code>标志，则命令行接口将使用此API。请注意，默认情况下<code>esbuild</code>不会打包。必须显式传递<code>--bundle</code>标志才能启用打包。如果未提供输入文件，则从stdin读取单个输入文件。<code>Build API</code>可以支持以下选项：</p><p><strong>简单选项:</strong></p><ul><li>Alias</li><li>Analyze</li><li>Bundle</li><li>Define</li><li>Entry points</li><li>External</li><li>Format</li><li>Inject</li><li>Loader</li><li>Minify</li><li>Outdir</li><li>Outfile</li><li>Packages</li><li>Platform</li><li>Serve</li><li>Sourcemap</li><li>Splitting</li><li>Target</li><li>Watch</li><li>Write</li></ul><p><strong>高级选项:</strong></p><ul><li>Allow overwrite</li><li>Asset names</li><li>Banner</li><li>Charset</li><li>Chunk names</li><li>Color</li><li>Conditions</li><li>Drop</li><li>Entry names</li><li>Footer</li><li>Global name</li><li>Ignore annotations</li><li>Incremental</li><li>JSX</li><li>JSX dev</li><li>JSX factory</li><li>JSX fragment</li><li>JSX import source</li><li>JSX side effects</li><li>Keep names</li><li>Legal comments</li><li>Log level</li><li>Log limit</li><li>Log override</li><li>Main fields</li><li>Mangle props</li><li>Metafile</li><li>Node paths</li><li>Out extension</li><li>Outbase</li><li>Preserve symlinks</li><li>Public path</li><li>Pure</li><li>Resolve extensions</li><li>Source root</li><li>Sourcefile</li><li>Sources content</li><li>Stdin</li><li>Supported</li><li>Tree shaking</li><li>Tsconfig</li><li>Working directory</li></ul><h2 id="简单选项" tabindex="-1">简单选项 <a class="header-anchor" href="#简单选项" aria-hidden="true">#</a></h2><h3 id="alias" tabindex="-1">Alias <a class="header-anchor" href="#alias" aria-hidden="true">#</a></h3><p><em>Supported by: Build</em> 此功能允许您在打包时用一个包替换另一个包。以下示例将包<code>oldpkg</code>替换为包<code>newpkg</code>：</p><div class="language-cmd"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">esbuild app.js </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">bundle </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">alias:oldpkg</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">newpkg</span></span>
<span class="line"></span></code></pre></div><p>这些替换首先会发生在<code>esbuild</code>所有的路径解析逻辑之前。此功能的一个使用场景是使用浏览器兼容包替换仅Node环境可使用的包，从而替换那些您无法控制的第三方代码，。</p><p>请注意，当使用<code>Alias</code>替换导入路径时，生成的导入路径将在工作目录中解析，而不是在包含具有导入路径的源文件的目录中解析。如果需要，可以使用<code>Working directory</code>功能设置<code>esbuild</code>所使用的工作目录。</p><h3 id="analyze" tabindex="-1">Analyze <a class="header-anchor" href="#analyze" aria-hidden="true">#</a></h3><p><em>Supported by: Build</em></p><p><em>如果您正在寻找交互式可视化，请尝试esbuild的Bundle Size Analyzer。您可以上传esbuild元文件以查看打包大小明细。</em></p><p>使用<code>Analyze</code>功能可以生成一份易于阅读的关于打包内容的报告：</p><div class="language-cmd"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;"> esbuild </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">bundle example.jsx </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">outfile</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">out.js </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">minify </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">analyze</span></span>
<span class="line"><span style="color:#A6ACCD;">out.js                                                                    </span><span style="color:#F78C6C;">27.</span><span style="color:#A6ACCD;">6kb  </span><span style="color:#F78C6C;">100.0</span><span style="color:#89DDFF;">%</span></span>
<span class="line"><span style="color:#A6ACCD;">   ├ node_modules/react</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">dom/cjs/react</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">dom</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">server</span><span style="color:#A6ACCD;">.browser.production.min.js  </span><span style="color:#F78C6C;">19.</span><span style="color:#A6ACCD;">2kb   </span><span style="color:#F78C6C;">69.8</span><span style="color:#89DDFF;">%</span></span>
<span class="line"><span style="color:#A6ACCD;">   ├ node_modules/react/cjs/react.production.min.js                          </span><span style="color:#F78C6C;">5.</span><span style="color:#A6ACCD;">9kb   </span><span style="color:#F78C6C;">21.4</span><span style="color:#89DDFF;">%</span></span>
<span class="line"><span style="color:#A6ACCD;">   ├ node_modules/object</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">assign/index.js                                     962b     </span><span style="color:#F78C6C;">3.4</span><span style="color:#89DDFF;">%</span></span>
<span class="line"><span style="color:#A6ACCD;">   ├ example.jsx                                                             137b     </span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">%</span></span>
<span class="line"><span style="color:#A6ACCD;">   ├ node_modules/react</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">dom/</span><span style="color:#FFCB6B;">server</span><span style="color:#A6ACCD;">.browser.js                                 50b     </span><span style="color:#F78C6C;">0.2</span><span style="color:#89DDFF;">%</span></span>
<span class="line"><span style="color:#A6ACCD;">   └ node_modules/react/index.js                                              50b     </span><span style="color:#F78C6C;">0.2</span><span style="color:#89DDFF;">%</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"></span></code></pre></div><p>该信息显示了每个<code>输出文件</code>打包的<code>输入文件</code>，以及它们最终占用的<code>输出文件</code>的百分比。如果您需要更多信息，可以启用<code>verbose</code>模式。这会显示从入口点到每个输入文件的导入路径，告诉您为什么给定的输入文件包含在打包文件中：</p><div class="language-cmd"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;"> esbuild </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">bundle example.jsx </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">outfile</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">out.js </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">minify </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">analyze</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">verbose</span></span>
<span class="line"><span style="color:#A6ACCD;">out.js ─────────────────────────────────────────────────────────────────── </span><span style="color:#F78C6C;">27.</span><span style="color:#A6ACCD;">6kb ─ </span><span style="color:#F78C6C;">100.0</span><span style="color:#89DDFF;">%</span></span>
<span class="line"><span style="color:#A6ACCD;">   ├ node_modules/react</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">dom/cjs/react</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">dom</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">server</span><span style="color:#A6ACCD;">.browser.production.min.js ─ </span><span style="color:#F78C6C;">19.</span><span style="color:#A6ACCD;">2kb ── </span><span style="color:#F78C6C;">69.8</span><span style="color:#89DDFF;">%</span></span>
<span class="line"><span style="color:#A6ACCD;">   │  └ node_modules/react</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">dom/</span><span style="color:#FFCB6B;">server</span><span style="color:#A6ACCD;">.browser.js</span></span>
<span class="line"><span style="color:#A6ACCD;">   │     └ example.jsx</span></span>
<span class="line"><span style="color:#A6ACCD;">   ├ node_modules/react/cjs/react.production.min.js ───────────────────────── </span><span style="color:#F78C6C;">5.</span><span style="color:#A6ACCD;">9kb ── </span><span style="color:#F78C6C;">21.4</span><span style="color:#89DDFF;">%</span></span>
<span class="line"><span style="color:#A6ACCD;">   │  └ node_modules/react/index.js</span></span>
<span class="line"><span style="color:#A6ACCD;">   │     └ example.jsx</span></span>
<span class="line"><span style="color:#A6ACCD;">   ├ node_modules/object</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">assign/index.js ──────────────────────────────────── 962b ──── </span><span style="color:#F78C6C;">3.4</span><span style="color:#89DDFF;">%</span></span>
<span class="line"><span style="color:#A6ACCD;">   │  └ node_modules/react</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">dom/cjs/react</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">dom</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">server</span><span style="color:#A6ACCD;">.browser.production.min.js</span></span>
<span class="line"><span style="color:#A6ACCD;">   │     └ node_modules/react</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">dom/</span><span style="color:#FFCB6B;">server</span><span style="color:#A6ACCD;">.browser.js</span></span>
<span class="line"><span style="color:#A6ACCD;">   │        └ example.jsx</span></span>
<span class="line"><span style="color:#A6ACCD;">   ├ example.jsx ──────────────────────────────────────────────────────────── 137b ──── </span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">%</span></span>
<span class="line"><span style="color:#A6ACCD;">   ├ node_modules/react</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">dom/</span><span style="color:#FFCB6B;">server</span><span style="color:#A6ACCD;">.browser.js ──────────────────────────────── 50b ──── </span><span style="color:#F78C6C;">0.2</span><span style="color:#89DDFF;">%</span></span>
<span class="line"><span style="color:#A6ACCD;">   │  └ example.jsx</span></span>
<span class="line"><span style="color:#A6ACCD;">   └ node_modules/react/index.js ───────────────────────────────────────────── 50b ──── </span><span style="color:#F78C6C;">0.2</span><span style="color:#89DDFF;">%</span></span>
<span class="line"><span style="color:#A6ACCD;">      └ example.jsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"></span></code></pre></div><p>上述分析只包含<code>metafile</code>文件中可以找到的信息的可视化。如果此分析不完全符合您的需求，欢迎您使用<code>metafile</code>中的信息构建自己的可视化。</p><p>请注意，此格式化的分析结果适用于人类，而非机器。特定的格式可能会随着时间的推移而改变，这可能会破坏任何试图解析它的工具。您不应该编写工具来解析此数据。您应该使用<code>JSON</code>元数据文件中的信息。此可视化中的所有内容都源自<code>metafile</code>中的<code>JSON</code>元数据，这样您就不会因为不解析<code>esbuild</code>的格式化分析结果而丢失任何信息。</p><h3 id="bundle" tabindex="-1">Bundle <a class="header-anchor" href="#bundle" aria-hidden="true">#</a></h3><p><em>Supported by: Build</em></p><p>打包文件意味着将任何导入的依赖项内联到文件本身中。此过程是递归的，因此依赖项的依赖项（等等）也将被内联。默认情况下，<code>esbuild</code>不会打包输入文件。打包必须显式启用，如下所示：</p><div class="language-cmd"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">esbuild </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;">.js </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">bundle</span></span>
<span class="line"></span></code></pre></div><p>请参阅入门指南，了解正式代码打包的示例。</p><p>请注意，打包不同于文件拼接。传递给<code>esbuild</code>多个需要打包的输入文件将生成多个单独的打包文件，而不是将输入文件拼接在一起。要使用<code>esbuild</code>将一组文件拼接在一起，请将它们全部导入到一个入口文件中，并将这个入口文件传递给<code>esuild</code>打包。</p><h4 id="不可解析的导入-non-analyzable-imports" tabindex="-1">不可解析的导入 Non-analyzable imports <a class="header-anchor" href="#不可解析的导入-non-analyzable-imports" aria-hidden="true">#</a></h4><p>使用<code>esbuild</code>打包仅适用于静态定义的导入（即，当导入路径是字符串文本时）。在运行时定义的导入（即依赖于运行时<code>run-time</code>代码求值的导入）不会被打包，因为打包是编译时<code>compile-time</code>操作。例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 可解析的导入 (将被esbuild打包)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pkg</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pkg</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pkg</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 不可解析的导入 (不会被esbuild打包)</span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">pkg/</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">}\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">pkg/</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">}\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pkg</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(require)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>解决此问题的方法是将包含此问题代码的包标记为外部包<code>external</code>，以便它不包含在打包文件中。然后，您需要确保在运行时，打包后的代码可以访问到这个外部包的副本。</p><p>一些打包工具（如Webpack）试图通过在打包过程中包含所有可能访问到的文件，然后在运行时模拟文件系统来支持这一点。但是，运行时文件系统仿真超出了范围，不会在esbuild中实现。如果您确实需要打包时实现这一点，则可能需要使用另一个打包器而不是<code>esbuild</code>。</p>`,47),p=[o];function c(i,t,r,d,C,y){return a(),l("div",null,p)}const F=s(e,[["render",c]]);export{A as __pageData,F as default};
