import{_ as s,c as a,o as l,d as e}from"./app.d6483e8d.js";const C=JSON.parse('{"title":"开始","description":"","frontmatter":{},"headers":[{"level":2,"title":"安装esbuild","slug":"安装esbuild","link":"#安装esbuild","children":[]},{"level":2,"title":"您的第一个bundle","slug":"您的第一个bundle","link":"#您的第一个bundle","children":[]},{"level":2,"title":"构建脚本","slug":"构建脚本","link":"#构建脚本","children":[]}],"relativePath":"esbuild/Getting-Started.md","lastUpdated":1672993039000}'),n={name:"esbuild/Getting-Started.md"},p=e(`<h1 id="开始" tabindex="-1">开始 <a class="header-anchor" href="#开始" aria-hidden="true">#</a></h1><h2 id="安装esbuild" tabindex="-1">安装esbuild <a class="header-anchor" href="#安装esbuild" aria-hidden="true">#</a></h2><p>首先，在本地下载并安装esbuild命令。可以使用npm（在安装NodeJs时会自动安装）安装预构建的本地可执行文件：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm install --save-exact esbuild</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>这条命令执行后，应该就已经在本地<code>node_modules</code>文件夹中安装了esbuild。您可以运行esbuild可执行文件来验证一切是否正常工作：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">./node_modules/.bin/esbuild --version</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>建议安装esbuild的方法是使用npm安装本机可执行文件。但如果你不想这样做，还有一些其他的安装方法。</p><h2 id="您的第一个bundle" tabindex="-1">您的第一个<code>bundle</code> <a class="header-anchor" href="#您的第一个bundle" aria-hidden="true">#</a></h2><p>这是一个关于esbuild功能以及如何快速使用它的真实示例。首先，安装react和react dom包：</p><div class="language-cmd"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm install react react</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">dom</span></span>
<span class="line"></span></code></pre></div><p>然后创建一个名为<code>app.jsx</code>的文件，其中包含以下代码：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> Server </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react-dom/server</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> Greet </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Hello, world!</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(Server</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">renderToString</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Greet</span><span style="color:#89DDFF;"> /&gt;</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"></span></code></pre></div><p>最后，告诉esbuild如何打包这个文件：</p><div class="language-cmd"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">./node_modules/.bin/esbuild app.jsx </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">bundle </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">outfile</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">out.js</span></span>
<span class="line"></span></code></pre></div><p>执行这个构建命令后，应该会创建一个名为out.js的文件，其中包含您的代码和打包在一起的React库。代码是完全独立的，不再依赖于node_modules目录。如果您使用<code>node out.js</code>运行代码，应该会看到如下内容：</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;h1 data-reactroot=&quot;&quot;&gt;Hello, world!&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>请注意，esbuild还将JSX语法转换为JavaScript，除了<code>.JSX</code>扩展名之外没有任何其他配置。虽然可以对esbuild进行配置，但这里尝试使用默认值，这样才能让更多的通用情况自动运行。如果您想在<code>.js</code>文件中使用<code>JSX语法</code>，可以使用<code>--loader:.js=JSX</code>标志告诉<code>esbuild</code>允许这样做。您可以在<code>API文档</code>中阅读有关可用配置选项的更多信息。</p><h2 id="构建脚本" tabindex="-1">构建脚本 <a class="header-anchor" href="#构建脚本" aria-hidden="true">#</a></h2><p>您的build命令将重复运行，因此您需要将其自动化。一种自然的方法是将构建脚本添加到package.json文件中，如下所示：</p><p>{</p><p>“脚本”：{</p><p>“build”：“esbuild app.jsx--bundle--outfile=out.js”</p><p>}</p><p>}</p><p>请注意，这直接使用esbuild命令，而没有相对路径。这是因为脚本部分中的所有内容都是使用路径中已经存在的esbuild命令运行的（只要您安装了包）。</p><p>构建脚本可以这样调用：</p><p>npm运行构建</p><p>但是，如果您需要将许多选项传递给esbuild，那么使用命令行界面可能会变得非常困难。对于更复杂的用途，您可能希望使用esbuild的JavaScript API以JavaScript编写构建脚本。这可能看起来像这样：</p><p>require（&#39;esbuild&#39;）.build({</p><p>入口点：[&#39;app.jsx&#39;]，</p><p>束：真，</p><p>outfile:&#39;out.js&#39;，</p><p>}).catch（（）=&gt;process.ext（1））</p><p>build函数在子进程中运行esbuild可执行文件，并返回一个promise，该promise在生成完成时解析。上面的代码不会打印出捕获到的异常，因为默认情况下，异常中的任何错误消息也会打印到控制台（尽管如果您愿意，可以更改日志级别以关闭它）。</p><p>虽然也有一个非异步的buildSync API，但异步API对于构建脚本更好，因为插件只能与异步API一起工作。您可以在API文档中阅读有关构建API的配置选项的更多信息。</p>`,35),o=[p];function t(c,r,i,d,u,D){return l(),a("div",null,o)}const A=s(n,[["render",t]]);export{C as __pageData,A as default};
